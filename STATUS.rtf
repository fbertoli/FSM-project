{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf130
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11940\viewh7800\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 STATUS OF WORK
\b0\fs24 \
FILES\

\b algorithm.py:
\b0  the file containing the main algorithm\

\b dataTools.py
\b0 : contains all the tools needed for reading, writing data\

\b dualModel.py:
\b0  everything needed for working on the dual model\

\b indigoTools.py: 
\b0 main file for Indigo. All tools needed for initializing, generating columns, solving and reading vrx files\

\b integerlModel.py:
\b0  everything needed for working on the integer model\

\b linearModel.py:
\b0  everything needed for working on the linear model (not in use)\

\b nodeSolver.py:
\b0  code for solving a given node. Solve a model by column generation basically.\

\b techincal_data.txt:
\b0  have the specifics for vehicles  and the distance matrix\

\b test.py:
\b0  contains a few test for the code written so far\

\b test_data.txt
\b0 : it has saved the first solution for all the 300 instances\
vrx_intances: contains base files and vrx files (with 0 fixed costs) for all instances\
\
STATUS:\
At this point only the solver for the master node is implemented. Algorithm basically only run nodeSolver.py. It also initialize solution if we have to but we don\'92t now since all of the best solutions are saved in test_data.txt.\
nodeSolver.py read technical_data and test_data and then:\
- create the dual and integer model\
- start a cycle:\
	- solve the dual to get the dual variables\
	- call indigoTools to generate new columns\
	- verify if the generated columns already were in the model, in which case it ignore them\
	- if there is no new columns with negative reduced cost exit the cycle\
- check if we actually reached optimality\
- solve the models last time\
- print the results\
\
column generation in IndigoTools does the following:\
- create new files with the appropriate costs calling a function setNewCosts\
- solve them in parallel saving the results in some _out files in vrx_tem_files folder\
- read the results in parallel and recalculate the cost based on the matrix function\
- return the generated columns\
\
}